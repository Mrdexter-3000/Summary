import { init, fetchQuery } from "@airstack/node";
import { NextRequest, NextResponse } from "next/server";
import { unstable_cache } from 'next/cache';

const apiKey = process.env.AIRSTACK_API_KEY;
if (!apiKey) {
  throw new Error("AIRSTACK_API_KEY is not defined");
}
init(apiKey);

console.log("Airstack API initialized");

const userQuery = `
query GetUserSocialCapital($userId: String!) {
  Socials(
    input: {filter: {userId: {_eq: $userId}}, blockchain: ethereum}
  ) {
    Social {
      profileName
      profileDisplayName
      userId
      profileBio
      profileImage
      profileImageContentValue {
        image {
          extraSmall
        }
      }
      socialCapital {
        socialCapitalScore
        socialCapitalRank
      }
    }
  }
}
`;

const likesReceivedQuery = `
query GetLikesReceivedByFid($blockchain: EveryBlockchain!, $_eq: Identity) {
  FarcasterCasts(
    input: {blockchain: $blockchain, filter: {castedBy: {_eq: $_eq}}}
  ) {
    Cast {
      fid
      numberOfLikes
    }
    pageInfo {
      nextCursor
      prevCursor 
    }
  }
}
`;

const cachedFetchUserData = unstable_cache(
  async (userId: string) => {
    console.log(`Fetching user data for userId: ${userId}`);
    const userData = await fetchQuery(userQuery, { userId });
    return userData;
  },
  ['user-data'],
  { revalidate: 3600 } // Cache for 1 hour
);

const cachedFetchLikesData = unstable_cache(
  async (userId: string) => {
    console.log(`Fetching likes data for userId: ${userId}`);
    const likesData = await fetchQuery(likesReceivedQuery, { blockchain: 'ALL', _eq: `fc_fid:${userId}` });
    return likesData;
  },
  ['likes-data'],
  { revalidate: 3600 } // Cache for 1 hour
);

export async function GET(req: NextRequest) {
  console.log(`API route called at ${new Date().toISOString()}`);
  console.log(`Full URL: ${req.url}`);

  const userId = req.nextUrl.searchParams.get("userId");
  console.log(`Requested userId: ${userId}`);

  if (!userId) {
    console.log("Error: userId parameter is missing");
    return NextResponse.json(
      { error: "userId parameter is required" },
      { status: 400 }
    );
  }

  try {
    console.log(`Attempting to fetch data for userId: ${userId}`);
    const [userData, likesData] = await Promise.all([
      cachedFetchUserData(userId),
      cachedFetchLikesData(userId)
    ]);
    console.log(`Data fetching completed for userId: ${userId}`);

    if (userData.error) {
      console.error("Airstack API error (user data):", userData.error);
      return NextResponse.json(
        { error: userData.error.message },
        { status: 500 }
      );
    }

    if (likesData.error) {
      console.error("Airstack API error (likes data):", likesData.error);
      return NextResponse.json(
        { error: likesData.error.message },
        { status: 500 }
      );
    }

    console.log(
      "Airstack API response (user data):",
      JSON.stringify(userData.data, null, 2)
    );

    console.log(
      "Airstack API response (likes data):",
      JSON.stringify(likesData.data, null, 2)
    );

    const socialData = userData.data.Socials.Social[0];
    if (!socialData) {
      return NextResponse.json(
        { error: "User not found" },
        { status: 404 }
      );
    }

    const totalLikesReceived = likesData.data.FarcasterCasts.Cast.reduce(
      (sum: number, cast: any) => sum + (cast.numberOfLikes || 0),
      0
    );

    const responseData = {
      userData: socialData,
      farcasterScore: socialData.socialCapital?.socialCapitalScore || 0,
      farcasterRank: socialData.socialCapital?.socialCapitalRank || 0,
      totalLikesReceived,
    };

    return NextResponse.json(responseData);
  } catch (error) {
    console.error("Unexpected error:", error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "An unexpected error occurred" },
      { status: 500 }
    );
  }
}